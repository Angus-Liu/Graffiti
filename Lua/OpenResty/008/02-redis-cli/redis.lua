---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by angus.
--- DateTime: 2019/9/2 8:11 下午
---

local _M = { sock = nil }

local mt = { __index = _M }

local function _read_data()

end

local function _do_cmd(sock, cmd, req)
    if not sock then
        print("sock not initialized.")
        return
    end
    local bytes, err1 = sock:send(req)
    if err1 then
        print("failed to execute '" .. cmd .. "'. Error: ", err1)
    end
    local line, err2 = sock:receive()
    if err2 then
        print("failed to execute '" .. cmd .. "'. Error: ", err2)
    end
    local symbol = string.byte(line)
    if symbol == 36 then
        line = sock:receive(tonumber(line:sub(2)))
        print(line)
    else
        print(line:sub(2))
    end

end

function _M.ping()
    local req = "ping\r\n"
    _do_cmd(_M.sock, "ping", req)
end

function _M.get(key)
    local req = string.format("get %s\r\n", key, value)
    _do_cmd(_M.sock, "get", req)
end

function _M.set(key, value)
    local req = string.format("set %s %s \r\n", key, value)
    _do_cmd(_M.sock, "set", req)
end

function _M.set_timeout(timeout)
    if not _M.sock then
        print("sock not initialized.")
        return
    end
    _M.sock:settimeout(timeout)
end

function _M.set_keepalive(max_idle_timeout, pool_size)
    if not _M.sock then
        print("sock not initialized.")
        return
    end
    _M.sock:setkeepalive(max_idle_timeout, pool_size)
end

function _M.close()
    if not _M.sock then
        print("sock not initialized.")
        return
    end
    _M:close()
end

function _M.new(self, host, port)
    _M.sock = ngx.socket.tcp()

    local ok, err = _M.sock:connect(host, port)
    if not ok then
        print("failed to connect to redis.", err)
    end

    return setmetatable({}, mt)
end

return _M